# Production-optimized multi-stage Dockerfile
FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create app directory and user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY bun.lockb* ./

# Install Bun for faster package management
RUN npm install -g bun

# Dependencies stage
FROM base AS deps

# Install dependencies
RUN bun install --frozen-lockfile --production=false

# Builder stage for frontend
FROM base AS frontend-builder

COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build frontend
RUN bun run build

# Builder stage for backend
FROM base AS backend-builder

COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build backend (if needed)
RUN bun run build:server || echo "No server build step defined"

# Production dependencies
FROM base AS prod-deps

COPY package*.json ./
RUN bun install --frozen-lockfile --production=true

# Runtime stage
FROM base AS runtime

# Copy production dependencies
COPY --from=prod-deps /app/node_modules ./node_modules

# Copy built application
COPY --from=frontend-builder /app/dist ./dist
COPY --from=backend-builder /app/server ./server

# Copy other necessary files
COPY package.json ./
COPY tsconfig.json ./

# Create necessary directories
RUN mkdir -p logs tmp uploads && \
    chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3001/api/health || exit 1

# Environment variables
ENV NODE_ENV=production
ENV PORT=3001
ENV HOSTNAME=0.0.0.0

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start application
CMD ["bun", "run", "server/index.ts"]